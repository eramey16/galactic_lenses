# MPI4PY test
FROM nvcr.io/nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04
WORKDIR /opt
ENV DEBIAN_FRONTEND noninteractive
# less build-essential gfortran nano vim wget postgresql-client

RUN \
    apt-get update        &&   \
    apt-get install --yes      \
        build-essential autoconf cmake flex bison zlib1g-dev \
        fftw-dev fftw3 apbs libicu-dev libbz2-dev libgmp-dev \
        bc libblas-dev liblapack-dev git    \
        libfftw3-dev automake lsb-core libxc-dev libgsl-dev  \
        unzip libhdf5-serial-dev ffmpeg libcurl4-openssl-dev \
        libtool swig  uuid-dev libedit-dev libyaml-cpp-dev make  \
        python3-yaml automake pkg-config libc6-dev libzmq3-dev \
        libjansson-dev liblz4-dev libarchive-dev python3-pip \
        libsqlite3-dev lua5.1 liblua5.1-dev lua-posix jq     \
        python3-dev python3-cffi python3-ply python3-sphinx  \
        aspell aspell-en valgrind libyaml-cpp-dev wget vim   \   
        make libzmq3-dev python3-yaml time valgrind gfortran \
        bzip2 ca-certificates curl git \
        mlocate python3-jsonschema python-is-python3 \      
        less nano postgresql-client &&\ 
    apt-get clean all

pip install python=3.13

WORKDIR /opt
ARG mpich=4.2.2
ARG mpich_prefix=mpich-$mpich
RUN \
    wget https://www.mpich.org/static/downloads/$mpich/$mpich_prefix.tar.gz && \
    tar xvzf $mpich_prefix.tar.gz                                           && \
    cd $mpich_prefix                                                        && \
    ./configure FFLAGS=-fallow-argument-mismatch FCFLAGS=-fallow-argument-mismatch \
    --prefix=/opt/mpich/install                                             && \
    make -j 16                                                              && \
    make install                                                            && \
    make clean                                                              && \
    cd ..                                                                   && \
    rm -rf $mpich_prefix.tar.gz
ENV PATH=$PATH:/opt/mpich/install/bin
ENV PATH=$PATH:/opt/mpich/install/include
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/mpich/install/lib
RUN /sbin/ldconfig


ENV PATH=$PATH:/usr/local/cuda/lib64/stubs
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64/stubs
ENV PATH=$PATH:/usr/local/cuda-11.8/targets/x86_64-linux/lib/stubs
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-11.8/targets/x86_64-linux/lib/stubs

RUN ln -s /usr/local/cuda-11.8/targets/x86_64-linux/lib/stubs/libnvidia-ml.so /usr/local/cuda-11.8/targets/x86_64-linux/lib/stubs/libnvidia-ml.so.1 


# ENV PATH /opt/conda/bin:$PATH
# RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-4.5.11-Linux-x86_64.sh -O ~/miniconda.sh && \
#     /bin/bash ~/miniconda.sh -b -p /opt/conda && \
#     rm ~/miniconda.sh && \
#     /opt/conda/bin/conda clean -tipsy && \
#     ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
#     echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
#     echo "conda activate base" >> ~/.bashrc


ENV TINI_VERSION v0.16.1
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini
RUN chmod +x /usr/bin/tini
# RUN conda upgrade -n base conda
# RUN conda install conda-forge::openbabel


RUN pip install setuptools
RUN python -m pip install mpi4py
RUN pip install ipython numpy pandas scipy astropy h5py hdf5
RUN pip install sqlalchemy psycopg2 requests scikit-learn
RUN pip install emcee dynesty schwimmbad mpi4py six curl
RUN pip install astropy astroquery corner ipykernel

WORKDIR /
RUN git clone https://github.com/cconroy20/fsps.git /fsps
ENV SPS_HOME='/fsps'

RUN python -m pip install astro-sedpy tdqm astro-prospector httplib2 pycurl-requests pyvo specutils mkl fsps

RUN git clone https://github.com/astro-datalab/datalab.git && \
    cd datalab && \
    pip install . && \
    cd .. && \
    rm -rf datalab

ADD classify.py /monocle/classify.py
ADD gallazzi_05_massmet.txt /monocle/gallazzi_05_massmet.txt
ADD rf.model /monocle/rf.model
ADD param_monocle.py /monocle/param_monocle.py
ADD prospect_conversion.py /monocle/prospect_conversion.py
ADD db_util.py /monocle/db_util.py
ADD __init__.py /monocle/__init__.py
ENV PYTHONPATH="/monocle/"
# ENV PGPASSFILE="/credentials/pgpass.conf"
WORKDIR /monocle
WORKDIR exports

ENTRYPOINT [ "/usr/bin/tini", "--" ]
CMD [ "/bin/bash" ]

